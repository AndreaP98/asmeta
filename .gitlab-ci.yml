variables:
  # This will suppress any download for dependencies and plugins or upload messages which would clutter the console log.
  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true  -Djava.awt.headless=true"
  # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
  # when running from the command line.
  # `installAtEnd` and `deployAtEnd` are only effective with recent version of the corresponding plugins.
  MAVEN_CLI_OPTS: "--batch-mode --fail-at-end --show-version --quiet -DinstallAtEnd=true -DdeployAtEnd=true"

# Specify the version of java to use
image: maven:3-jdk-8

# Cache downloaded dependencies and plugins between builds.
# To keep cache across branches add 'key: "$CI_JOB_NAME"'
cache:
  paths:
    - .m2/repository

# For merge requests do not `deploy` but only run `verify`.
# See https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html
.verify: &verify
  stage: test
  script:
    - 'mvn $MAVEN_CLI_OPTS verify'
  except:
    - master

# Template for running a code quality analyzer 
include:
  - template: Code-Quality.gitlab-ci.yml
 
# Job for uploading the json report as artifact to gitlab.
# Will show up in the pipeline report.
code_quality:
  artifacts:
    paths: [gl-code-quality-report.json]

# Job for uploading the html report as artifact to gitlab
code_quality_html:
  extends: code_quality
  variables:
    REPORT_FORMAT: html
  artifacts:
    paths: [gl-code-quality-report.html]
  
# Job for checking wether the mvn build succeeds
build:
  stage: build
  script:
    - mvn compile

# Job to run all surefire tests and run the JaCoCo coverage plugin
# TODO:
# - Remove the failure.ignore=true AFTER fixing all the tests.
#   To make it so that when a test fails, the pipeline job also fails.
test-jdk8:
  stage: test
  script:
    - 'mvn -Dmaven.test.failure.ignore=true clean org.jacoco:jacoco-maven-plugin:prepare-agent test org.jacoco:jacoco-maven-plugin:report-aggregate'
  artifacts:
    when: always
    reports: # Upload the info for the job report artifact (artifact:reports:junit in this case)
      junit: # Paths of all test results for each test module
        - code/core/asmeta.parser/asmeta.parser.test/target/surefire-reports/TEST-*.xml
        - code/core/asmeta.emf/target/surefire-reports/TEST-*.xml
        - code/core/asmeta.simulator/asmeta.simulator.test/target/surefire-reports/TEST-*.xml
        - code/extensions/asmetasmv/asmeta.smv.test/target/surefire-reports/TEST-*.xml
        - code/extensions/asmeta.flattener/asmeta.flattener.test/target/surefire-reports/TEST-*.xml

# Job to translate the JaCoCo xml into a cobertura xml
coverage:
  stage: deploy
  image: haynes/jacoco2cobertura:1.0.3
  script:
    # convert report from jacoco to cobertura
    - 'python /opt/cover2cover.py reports/coverage/jacoco/jacoco.xml > reports/coverage/cobertura.xml'
    # read the <source></source> tag and prepend the path to every filename attribute
    - 'python /opt/source2filename.py reports/coverage/cobertura.xml'
  needs: ["test-jdk8"]
  dependencies:
    - test-jdk8
  artifacts:
    reports: # Upload the info for the job report artifact (artifact:reports:cobertura)
      cobertura: reports/coverage/cobertura.xml
    paths: # Upload the file as a generic job artifact
      - reports/coverage/jacoco/jacoco.xml
    