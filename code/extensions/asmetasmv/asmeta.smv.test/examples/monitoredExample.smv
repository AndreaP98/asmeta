--file examples\monitoredExample.smv
-- options: flatten? false
MODULE main
	VAR
		foo: boolean; --controlled
		fooA: boolean; --controlled
		fooB: boolean; --controlled
		fooC: boolean; --controlled
		fooD: boolean; --controlled
		fooE: boolean; --controlled
		fooF: boolean; --controlled
		fooH: boolean; --controlled
		fooI: boolean; --controlled
		fooL: boolean; --controlled
		fooM: boolean; --controlled
		mon: boolean; --monitored
		mon2: boolean; --monitored
		mon3: boolean; --monitored
		--declaration of choose variables
		var_$x_0: boolean;
	DEFINE
	ASSIGN
		init(foo) := mon;
		init(fooA) := TRUE;
		init(fooB) := TRUE;
		init(fooC) := mon;
		init(fooD) := mon;
		init(fooE) := !(mon);
		init(fooF) := !(mon);
		init(fooH) := FALSE;
		init(fooI) := mon2;
		init(fooL) := mon3;
		init(fooM) := mon;
		next(foo) := mon;
		next(fooA) := fooB;
		next(fooB) := !(fooB);
		next(fooC) :=
			case
				(!(mon)): FALSE;
				(mon): TRUE;
				TRUE: fooC;
			esac;
		next(fooD) :=
			case
				(!(mon)): FALSE;
				(mon): TRUE;
				TRUE: fooD;
			esac;
		next(fooE) :=
			case
				(!(mon)): TRUE;
				(mon): FALSE;
				TRUE: fooE;
			esac;
		next(fooF) :=
			case
				(!(mon)): TRUE;
				(mon): FALSE;
				TRUE: fooF;
			esac;
		next(fooH) :=
			case
				(!(fooH)): fooH;
				(fooH): !(fooH);
				TRUE: fooH;
			esac;
		next(fooI) :=
			case
				(var_$x_0 & mon2): TRUE;
				(!(var_$x_0) & !(mon2)): FALSE;
				TRUE: fooI;
			esac;
		next(fooL) :=
			case
				(mon3): TRUE;
				(!(mon3)): FALSE;
				TRUE: fooL;
			esac;
		next(fooM) := mon;
	INVAR	((var_$x_0 & mon2) | (!(var_$x_0) & !(mon2)));
--CTL properties
CTLSPEC NAME ctl0 := AG(TRUE);
CTLSPEC NAME ctl1 := (AX(AG((fooA != fooB))) & (fooA = fooB));
CTLSPEC NAME ctl2 := EF(mon);
CTLSPEC NAME ctl3 := EF(!(mon));
CTLSPEC NAME ctl4 := AG((EF(!(mon)) & EF(mon)));
CTLSPEC NAME ctl5 := ((foo = mon) & (AG((mon <-> AX(foo))) & AG((!(mon) <-> AX(!(foo))))));
CTLSPEC NAME ctl6 := ((fooD = mon) & (AG((mon <-> AX(fooD))) & AG((!(mon) <-> AX(!(fooD))))));
CTLSPEC NAME ctl7 := ((AG((!(mon) <-> AX(!(fooC)))) & AG((mon <-> AX(fooC)))) & (fooC = mon));
CTLSPEC NAME ctl8 := ((fooD = mon) & (AG((mon <-> AX(fooD))) & AG((!(mon) <-> AX(!(fooD))))));
CTLSPEC NAME ctl9 := ((fooE = !(mon)) & (AG((!(mon) <-> AX(fooE))) & AG((mon <-> AX(!(fooE))))));
CTLSPEC NAME ctl10 := ((fooE = !(mon)) & (AG((!(mon) <-> AX(fooE))) & AG((mon <-> AX(!(fooE))))));
CTLSPEC NAME ctl11 := ((AG((!(mon) <-> AX(fooF))) & AG((mon <-> AX(!(fooF))))) & (fooF = !(mon)));
CTLSPEC NAME ctl12 := ((AG((!(mon) <-> AX(fooF))) & AG((mon <-> AX(!(fooF))))) & (fooF = !(mon)));
CTLSPEC NAME ctl13 := ((AG((!(mon2) <-> AX(!(fooI)))) & AG((mon2 <-> AX(fooI)))) & (fooI = mon2));
CTLSPEC NAME ctl14 := ((fooL = mon3) & (AG((!(mon3) <-> AX(!(fooL)))) & AG((mon3 <-> AX(fooL)))));
CTLSPEC NAME ctl15 := ((AG((!(mon) <-> AX(!(fooM)))) & AG((mon <-> AX(fooM)))) & (fooM = mon));
--AsmetaL invariants
CTLSPEC	AG(TRUE);
CTLSPEC	AG(TRUE);
