--file examples\taxi_sing.smv
-- options: flatten? false
MODULE main
	VAR
		clientDestX: {-2147483647, 1, 2, 3, 4, 5, 6, 7, 8}; --controlled
		clientDestY: {-2147483647, 1, 2, 3, 4, 5, 6, 7, 8}; --controlled
		clientNumTravels: {-2147483647, 0, 1, 2}; --controlled
		clientPosX: {-2147483647, 1, 2, 3, 4, 5, 6, 7, 8}; --controlled
		clientPosY: {-2147483647, 1, 2, 3, 4, 5, 6, 7, 8}; --controlled
		clientState: {CALLTAXI, CLIENTSTATE_UNDEF, ENDTRAVELS, IDLECL, TRAVELLING, WAITING}; --controlled
		decideToTravel: boolean; --monitored
		destX: 1..8; --monitored
		destY: 1..8; --monitored
		stepX: -1..1; --monitored
		stepY: -1..1; --monitored
		taxiPosX: {-2147483647, 1, 2, 3, 4, 5, 6, 7, 8}; --controlled
		taxiPosY: {-2147483647, 1, 2, 3, 4, 5, 6, 7, 8}; --controlled
		taxiState: {IDLETX, TAXISTATE_UNDEF, TOCLIENT, WITHCLIENT}; --controlled
	CONSTANTS TAXISTATE_UNDEF, IDLETX, TOCLIENT, WITHCLIENT, CLIENTSTATE_UNDEF, CALLTAXI, ENDTRAVELS, IDLECL, TRAVELLING, WAITING;
	ASSIGN
		init(clientDestX) := -2147483647;
		init(clientDestY) := -2147483647;
		init(clientNumTravels) := 2;
		init(clientPosX) := 2;
		init(clientPosY) := 2;
		init(clientState) := IDLECL;
		init(taxiPosX) := 3;
		init(taxiPosY) := 3;
		init(taxiState) := IDLETX;
		next(clientDestX) :=
			case
				((clientNumTravels > 0) & (clientState = IDLECL) & decideToTravel) & destX in {-2147483647, 1, 2, 3, 4, 5, 6, 7, 8}: destX;
				TRUE: clientDestX;
			esac;
		next(clientDestY) :=
			case
				((clientNumTravels > 0) & (clientState = IDLECL) & decideToTravel) & destY in {-2147483647, 1, 2, 3, 4, 5, 6, 7, 8}: destY;
				TRUE: clientDestY;
			esac;
		next(clientNumTravels) :=
			case
				((taxiState = WITHCLIENT) & ((taxiPosX = clientDestX) & (taxiPosY = clientDestY))) & (clientNumTravels - 1) in {-2147483647, 0, 1, 2}: (clientNumTravels - 1);
				TRUE: clientNumTravels;
			esac;
		next(clientPosX) :=
			case
				((taxiState = WITHCLIENT) & !((taxiPosX = clientDestX) & (taxiPosY = clientDestY)) & (clientPosX < clientDestX)) & (clientPosX + 1) in {-2147483647, 1, 2, 3, 4, 5, 6, 7, 8}: (clientPosX + 1);
				((clientPosX > clientDestX) & (taxiState = WITHCLIENT) & !((taxiPosX = clientDestX) & (taxiPosY = clientDestY))) & (clientPosX - 1) in {-2147483647, 1, 2, 3, 4, 5, 6, 7, 8}: (clientPosX - 1);
				(!(decideToTravel) & (clientNumTravels > 0) & (clientState = IDLECL) & ((clientPosX > 1) & (clientPosX < 8))) & (clientPosX + stepX) in {-2147483647, 1, 2, 3, 4, 5, 6, 7, 8}: (clientPosX + stepX);
				TRUE: clientPosX;
			esac;
		next(clientPosY) :=
			case
				((taxiState = WITHCLIENT) & !((taxiPosX = clientDestX) & (taxiPosY = clientDestY)) & (clientPosY > clientDestY)) & (clientPosY - 1) in {-2147483647, 1, 2, 3, 4, 5, 6, 7, 8}: (clientPosY - 1);
				((taxiState = WITHCLIENT) & !((taxiPosX = clientDestX) & (taxiPosY = clientDestY)) & (clientPosY < clientDestY)) & (clientPosY + 1) in {-2147483647, 1, 2, 3, 4, 5, 6, 7, 8}: (clientPosY + 1);
				(!(decideToTravel) & (clientNumTravels > 0) & (clientState = IDLECL) & ((clientPosY > 1) & (clientPosY < 8))) & (clientPosY + stepY) in {-2147483647, 1, 2, 3, 4, 5, 6, 7, 8}: (clientPosY + stepY);
				TRUE: clientPosY;
			esac;
		next(clientState) :=
			case
				((taxiState = WITHCLIENT) & ((taxiPosX = clientDestX) & (taxiPosY = clientDestY))): IDLECL;
				(!(clientNumTravels > 0) & (clientState = IDLECL)): ENDTRAVELS;
				(clientState = CALLTAXI): WAITING;
				((clientNumTravels > 0) & (clientState = IDLECL) & decideToTravel): CALLTAXI;
				((taxiState = TOCLIENT) & ((taxiPosX = clientPosX) & (taxiPosY = clientPosY))): TRAVELLING;
				TRUE: clientState;
			esac;
		next(taxiPosX) :=
			case
				(((taxiPosX < clientPosX) & (taxiState = TOCLIENT) & !((taxiPosX = clientPosX) & (taxiPosY = clientPosY))) | ((taxiState = WITHCLIENT) & !((taxiPosX = clientDestX) & (taxiPosY = clientDestY)) & (taxiPosX < clientDestX))) & (taxiPosX + 1) in {-2147483647, 1, 2, 3, 4, 5, 6, 7, 8}: (taxiPosX + 1);
				(((taxiPosX > clientPosX) & (taxiState = TOCLIENT) & !((taxiPosX = clientPosX) & (taxiPosY = clientPosY))) | ((taxiState = WITHCLIENT) & !((taxiPosX = clientDestX) & (taxiPosY = clientDestY)) & (taxiPosX > clientDestX))) & (taxiPosX - 1) in {-2147483647, 1, 2, 3, 4, 5, 6, 7, 8}: (taxiPosX - 1);
				TRUE: taxiPosX;
			esac;
		next(taxiPosY) :=
			case
				(((taxiState = TOCLIENT) & !((taxiPosX = clientPosX) & (taxiPosY = clientPosY)) & (taxiPosY < clientPosY)) | ((taxiPosY < clientDestY) & (taxiState = WITHCLIENT) & !((taxiPosX = clientDestX) & (taxiPosY = clientDestY)))) & (taxiPosY + 1) in {-2147483647, 1, 2, 3, 4, 5, 6, 7, 8}: (taxiPosY + 1);
				(((taxiPosY > clientDestY) & (taxiState = WITHCLIENT) & !((taxiPosX = clientDestX) & (taxiPosY = clientDestY))) | ((taxiPosY > clientPosY) & (taxiState = TOCLIENT) & !((taxiPosX = clientPosX) & (taxiPosY = clientPosY)))) & (taxiPosY - 1) in {-2147483647, 1, 2, 3, 4, 5, 6, 7, 8}: (taxiPosY - 1);
				TRUE: taxiPosY;
			esac;
		next(taxiState) :=
			case
				((taxiState = WITHCLIENT) & ((taxiPosX = clientDestX) & (taxiPosY = clientDestY))): IDLETX;
				(clientState = CALLTAXI): TOCLIENT;
				((taxiState = TOCLIENT) & ((taxiPosX = clientPosX) & (taxiPosY = clientPosY))): WITHCLIENT;
				TRUE: taxiState;
			esac;
--CTL properties
CTLSPEC NAME ctl0 := AG(((taxiState = WITHCLIENT) -> ((taxiPosX = clientPosX) & (taxiPosY = clientPosY))));
CTLSPEC NAME ctl1 := AG(((clientState = ENDTRAVELS) -> AG((clientState = ENDTRAVELS))));
CTLSPEC NAME ctl2 := AG(((clientState = WAITING) -> AF((clientState = TRAVELLING))));
CTLSPEC NAME ctl3 := AG(((clientState = TRAVELLING) <-> (taxiState = WITHCLIENT)));
CTLSPEC NAME ctl4 := AG(((clientState = WAITING) <-> (taxiState = TOCLIENT)));
CTLSPEC NAME ctl5 := EF((((clientState = CALLTAXI) & (clientPosX = taxiPosX)) & (clientPosY = taxiPosY)));
CTLSPEC NAME ctl6 := AG(EX(TRUE));
