--file examples\functions.smv
MODULE main
	VAR
		fooA: {-2147483647, 1, 10, 2, 3, 4, 5, 6, 7, 8, 9}; --controlled
		fooB: {-2147483647, 1, 10, 2, 3, 4, 5, 6, 7, 8, 9}; --controlled
		fooC: {-2147483647, 1, 10, 2, 3, 4, 5, 6, 7, 8, 9}; --controlled
		fooD: {-2147483647, 1, 10, 2, 3, 4, 5, 6, 7, 8, 9}; --controlled
		fooE: {-2147483647, 1, 10, 2, 3, 4, 5, 6, 7, 8, 9}; --controlled
		fooEqualsEnum: boolean; --controlled
		fooEqualsInteger: boolean; --controlled
		fooF: {-2147483647, 1, 10, 2, 3, 4, 5, 6, 7, 8, 9}; --controlled
		fooG: {-2147483647, 1, 10, 2, 3, 4, 5, 6, 7, 8, 9}; --controlled
		fooGE1: boolean; --controlled
		fooGE2: boolean; --controlled
		fooGE3: boolean; --controlled
		fooGE4: boolean; --controlled
		fooGE5: boolean; --controlled
		fooGE6: boolean; --controlled
		fooGT1: boolean; --controlled
		fooGT2: boolean; --controlled
		fooGT3: boolean; --controlled
		fooGT4: boolean; --controlled
		fooH: {-2147483647, 1, 10, 2, 3, 4, 5, 6, 7, 8, 9}; --controlled
		fooI: {-2147483647, 1, 10, 2, 3, 4, 5, 6, 7, 8, 9}; --controlled
		fooJ: boolean; --controlled
		fooK: boolean; --controlled
		fooL: boolean; --controlled
		fooLE1: boolean; --controlled
		fooLE2: boolean; --controlled
		fooLE3: boolean; --controlled
		fooLE4: boolean; --controlled
		fooLE5: boolean; --controlled
		fooLE6: boolean; --controlled
		fooLL: boolean; --controlled
		fooLLL: boolean; --controlled
		fooLLLL: boolean; --controlled
		fooLLLLL: boolean; --controlled
		fooLLLLLL: boolean; --controlled
		fooLT1: boolean; --controlled
		fooLT2: boolean; --controlled
		fooLT3: boolean; --controlled
		fooLT4: boolean; --controlled
		fooM: boolean; --controlled
		fooMinusUnary2_-1: {-1, -2147483647, 0, 1}; --controlled
		fooMinusUnary2_0: {-1, -2147483647, 0, 1}; --controlled
		fooMinusUnary2_1: {-1, -2147483647, 0, 1}; --controlled
		fooMinusUnary_-1: {-1, -2147483647, 0, 1}; --controlled
		fooMinusUnary_0: {-1, -2147483647, 0, 1}; --controlled
		fooMinusUnary_1: {-1, -2147483647, 0, 1}; --controlled
		fooMod1: boolean; --controlled
		fooMod10: boolean; --controlled
		fooMod11: boolean; --controlled
		fooMod12: boolean; --controlled
		fooMod2: boolean; --controlled
		fooMod3: boolean; --controlled
		fooMod4: boolean; --controlled
		fooMod5: boolean; --controlled
		fooMod6: boolean; --controlled
		fooMod7: boolean; --controlled
		fooMod8: boolean; --controlled
		fooN: boolean; --controlled
		fooNotEqualsEnum: boolean; --controlled
		fooNotEqualsInteger: boolean; --controlled
		fooNotFalse: boolean; --controlled
		fooNotNotFalse: boolean; --controlled
		fooNotNotTrue: boolean; --controlled
		fooNotTrue: boolean; --controlled
		fooO: boolean; --controlled
		fooP: boolean; --controlled
		fooQ: boolean; --controlled
		fooR: boolean; --controlled
		fooS: boolean; --controlled
		fooT: boolean; --controlled
		fooU: boolean; --controlled
		fooV: boolean; --controlled
		fooW: boolean; --controlled
		fooX: boolean; --controlled
		fooXor1: boolean; --controlled
		fooXor2: boolean; --controlled
		fooXor3: boolean; --controlled
		fooXor4: boolean; --controlled
		fooZ: boolean; --controlled
		funcA: {-1, -2, -2147483647, 0, 1, 2}; --controlled
		funcAdd: {-2147483647, 1, 10, 2, 3, 4, 5, 6, 7, 8, 9}; --controlled
		funcB: {-1, -2, -2147483647, 0, 1, 2}; --controlled
		funcC: {-1, -2, -2147483647, 0, 1, 2}; --controlled
		funcD: {-1, -2, -2147483647, 0, 1, 2}; --controlled
		funcDiv: {-2147483647, 1, 10, 2, 3, 4, 5, 6, 7, 8, 9}; --controlled
		funcMult: {-2147483647, 1, 10, 2, 3, 4, 5, 6, 7, 8, 9}; --controlled
	DEFINE
	CONSTANTS ENUMDOM_UNDEF, AA, BB, CC;
	ASSIGN
		init(fooA) := 2;
		init(fooB) := 3;
		init(fooC) := 3;
		init(fooD) := 1;
		init(fooE) := 2;
		init(fooEqualsEnum) := TRUE;
		init(fooEqualsInteger) := TRUE;
		init(fooF) := 1;
		init(fooG) := 6;
		init(fooGE1) := TRUE;
		init(fooGE2) := FALSE;
		init(fooGE3) := TRUE;
		init(fooGE4) := FALSE;
		init(fooGE5) := TRUE;
		init(fooGE6) := TRUE;
		init(fooGT1) := TRUE;
		init(fooGT2) := FALSE;
		init(fooGT3) := TRUE;
		init(fooGT4) := FALSE;
		init(fooH) := 4;
		init(fooI) := 4;
		init(fooJ) := FALSE;
		init(fooK) := TRUE;
		init(fooL) := TRUE;
		init(fooLE1) := TRUE;
		init(fooLE2) := FALSE;
		init(fooLE3) := TRUE;
		init(fooLE4) := FALSE;
		init(fooLE5) := TRUE;
		init(fooLE6) := TRUE;
		init(fooLL) := TRUE;
		init(fooLLL) := FALSE;
		init(fooLLLL) := TRUE;
		init(fooLLLLL) := TRUE;
		init(fooLLLLLL) := TRUE;
		init(fooLT1) := TRUE;
		init(fooLT2) := FALSE;
		init(fooLT3) := TRUE;
		init(fooLT4) := FALSE;
		init(fooM) := TRUE;
		init(fooMinusUnary2_-1) := -1;
		init(fooMinusUnary2_0) := 0;
		init(fooMinusUnary2_1) := 1;
		init(fooMinusUnary_-1) := 1;
		init(fooMinusUnary_0) := 0;
		init(fooMinusUnary_1) := -1;
		init(fooMod1) := TRUE;
		init(fooMod10) := TRUE;
		init(fooMod11) := TRUE;
		init(fooMod12) := TRUE;
		init(fooMod2) := TRUE;
		init(fooMod3) := TRUE;
		init(fooMod4) := TRUE;
		init(fooMod5) := TRUE;
		init(fooMod6) := TRUE;
		init(fooMod7) := TRUE;
		init(fooMod8) := TRUE;
		init(fooN) := FALSE;
		init(fooNotEqualsEnum) := TRUE;
		init(fooNotEqualsInteger) := TRUE;
		init(fooNotFalse) := TRUE;
		init(fooNotNotFalse) := FALSE;
		init(fooNotNotTrue) := TRUE;
		init(fooNotTrue) := FALSE;
		init(fooO) := TRUE;
		init(fooP) := TRUE;
		init(fooQ) := FALSE;
		init(fooR) := FALSE;
		init(fooS) := TRUE;
		init(fooT) := FALSE;
		init(fooU) := FALSE;
		init(fooV) := FALSE;
		init(fooW) := TRUE;
		init(fooX) := TRUE;
		init(fooXor1) := FALSE;
		init(fooXor2) := TRUE;
		init(fooXor3) := TRUE;
		init(fooXor4) := FALSE;
		init(fooZ) := TRUE;
		init(funcA) := 2;
		init(funcAdd) := 3;
		init(funcB) := 2;
		init(funcC) := 2;
		init(funcD) := 2;
		init(funcDiv) := 3;
		init(funcMult) := 8;
		next(fooA) :=
			case
				2 in {-2147483647, 1, 10, 2, 3, 4, 5, 6, 7, 8, 9}: 2;
				TRUE: fooA;
			esac;
		next(fooB) :=
			case
				(fooA + 1) in {-2147483647, 1, 10, 2, 3, 4, 5, 6, 7, 8, 9}: (fooA + 1);
				TRUE: fooB;
			esac;
		next(fooC) :=
			case
				(1 + fooA) in {-2147483647, 1, 10, 2, 3, 4, 5, 6, 7, 8, 9}: (1 + fooA);
				TRUE: fooC;
			esac;
		next(fooD) :=
			case
				1 in {-2147483647, 1, 10, 2, 3, 4, 5, 6, 7, 8, 9}: 1;
				TRUE: fooD;
			esac;
		next(fooE) :=
			case
				(fooB - 1) in {-2147483647, 1, 10, 2, 3, 4, 5, 6, 7, 8, 9}: (fooB - 1);
				TRUE: fooE;
			esac;
		next(fooEqualsEnum) := TRUE;
		next(fooEqualsInteger) := TRUE;
		next(fooF) :=
			case
				(3 - fooA) in {-2147483647, 1, 10, 2, 3, 4, 5, 6, 7, 8, 9}: (3 - fooA);
				TRUE: fooF;
			esac;
		next(fooG) :=
			case
				6 in {-2147483647, 1, 10, 2, 3, 4, 5, 6, 7, 8, 9}: 6;
				TRUE: fooG;
			esac;
		next(fooGE1) := TRUE;
		next(fooGE2) := FALSE;
		next(fooGE3) := (fooMinusUnary2_1 != 0);
		next(fooGE4) := (fooMinusUnary2_1 >= 2);
		next(fooGE5) := TRUE;
		next(fooGE6) := (fooMinusUnary2_0 >= 0);
		next(fooGT1) := TRUE;
		next(fooGT2) := FALSE;
		next(fooGT3) := ((0 > fooMinusUnary2_1) | (fooMinusUnary2_1 > 0));
		next(fooGT4) := (fooMinusUnary2_1 > 2);
		next(fooH) :=
			case
				(fooA * 2) in {-2147483647, 1, 10, 2, 3, 4, 5, 6, 7, 8, 9}: (fooA * 2);
				TRUE: fooH;
			esac;
		next(fooI) :=
			case
				(2 * fooA) in {-2147483647, 1, 10, 2, 3, 4, 5, 6, 7, 8, 9}: (2 * fooA);
				TRUE: fooI;
			esac;
		next(fooJ) := FALSE;
		next(fooK) := TRUE;
		next(fooL) := TRUE;
		next(fooLE1) := TRUE;
		next(fooLE2) := FALSE;
		next(fooLE3) := (0 != fooMinusUnary2_1);
		next(fooLE4) := (2 <= fooMinusUnary2_1);
		next(fooLE5) := TRUE;
		next(fooLE6) := (0 <= fooMinusUnary2_0);
		next(fooLL) := !(fooT);
		next(fooLLL) := !(fooZ);
		next(fooLLLL) := TRUE;
		next(fooLLLLL) := TRUE;
		next(fooLLLLLL) := TRUE;
		next(fooLT1) := TRUE;
		next(fooLT2) := FALSE;
		next(fooLT3) := ((0 < fooMinusUnary2_1) | (fooMinusUnary2_1 < 0));
		next(fooLT4) := (2 < fooMinusUnary2_1);
		next(fooM) := TRUE;
		next(fooMinusUnary2_-1) :=
			case
				fooMinusUnary_-1 in {-1, -2147483647, 0, 1}: fooMinusUnary_-1;
				TRUE: fooMinusUnary2_-1;
			esac;
		next(fooMinusUnary2_0) :=
			case
				fooMinusUnary_0 in {-1, -2147483647, 0, 1}: fooMinusUnary_0;
				TRUE: fooMinusUnary2_0;
			esac;
		next(fooMinusUnary2_1) :=
			case
				fooMinusUnary_1 in {-1, -2147483647, 0, 1}: fooMinusUnary_1;
				TRUE: fooMinusUnary2_1;
			esac;
		next(fooMinusUnary_-1) :=
			case
				1 in {-1, -2147483647, 0, 1}: 1;
				TRUE: fooMinusUnary_-1;
			esac;
		next(fooMinusUnary_0) :=
			case
				0 in {-1, -2147483647, 0, 1}: 0;
				TRUE: fooMinusUnary_0;
			esac;
		next(fooMinusUnary_1) :=
			case
				-1 in {-1, -2147483647, 0, 1}: -1;
				TRUE: fooMinusUnary_1;
			esac;
		next(fooMod1) := TRUE;
		next(fooMod10) := ((fooMinusUnary2_0 mod 2) = 0);
		next(fooMod11) := (((fooMinusUnary2_-1 mod 2) = -1) | ((fooMinusUnary2_-1 mod 2) = 1));
		next(fooMod12) := (((fooMinusUnary2_-1 mod -2) = 1) | ((fooMinusUnary2_-1 mod -2) = -1));
		next(fooMod2) := TRUE;
		next(fooMod3) := TRUE;
		next(fooMod4) := TRUE;
		next(fooMod5) := TRUE;
		next(fooMod6) := TRUE;
		next(fooMod7) := TRUE;
		next(fooMod8) := TRUE;
		next(fooN) := FALSE;
		next(fooNotEqualsEnum) := TRUE;
		next(fooNotEqualsInteger) := TRUE;
		next(fooNotFalse) := TRUE;
		next(fooNotNotFalse) := FALSE;
		next(fooNotNotTrue) := TRUE;
		next(fooNotTrue) := FALSE;
		next(fooO) := TRUE;
		next(fooP) := TRUE;
		next(fooQ) := FALSE;
		next(fooR) := FALSE;
		next(fooS) := TRUE;
		next(fooT) := FALSE;
		next(fooU) := FALSE;
		next(fooV) := FALSE;
		next(fooW) := TRUE;
		next(fooX) := TRUE;
		next(fooXor1) := FALSE;
		next(fooXor2) := TRUE;
		next(fooXor3) := TRUE;
		next(fooXor4) := FALSE;
		next(fooZ) := TRUE;
		next(funcA) :=
			case
				-1 in {-1, -2, -2147483647, 0, 1, 2}: -1;
				TRUE: funcA;
			esac;
		next(funcAdd) :=
			case
				5 in {-2147483647, 1, 10, 2, 3, 4, 5, 6, 7, 8, 9}: 5;
				TRUE: funcAdd;
			esac;
		next(funcB) :=
			case
				1 in {-1, -2, -2147483647, 0, 1, 2}: 1;
				TRUE: funcB;
			esac;
		next(funcC) :=
			case
				-1 in {-1, -2, -2147483647, 0, 1, 2}: -1;
				TRUE: funcC;
			esac;
		next(funcD) :=
			case
				1 in {-1, -2, -2147483647, 0, 1, 2}: 1;
				TRUE: funcD;
			esac;
		next(funcDiv) :=
			case
				2 in {-2147483647, 1, 10, 2, 3, 4, 5, 6, 7, 8, 9}: 2;
				TRUE: funcDiv;
			esac;
		next(funcMult) :=
			case
				6 in {-2147483647, 1, 10, 2, 3, 4, 5, 6, 7, 8, 9}: 6;
				TRUE: funcMult;
			esac;
--CTL properties
CTLSPEC NAME ctl0 := AG(((((((fooE = 2) & (((fooC = 3) & ((fooB = 3) & (fooA = 2))) & (fooD = 1))) & (fooF = 1)) & (fooG = 6)) & (fooH = 4)) & (fooI = 4)));
CTLSPEC NAME ctl1 := AG((((fooLLLL & (((((fooL & fooM) & !(fooN)) & fooO) & fooLL) & !(fooLLL))) & fooLLLLL) & fooLLLLLL));
CTLSPEC NAME ctl2 := AG((((!(fooQ) & fooP) & !(fooR)) & fooS));
CTLSPEC NAME ctl3 := AG(((!(fooV) & (!(fooU) & !(fooT))) & fooZ));
CTLSPEC NAME ctl4 := AG((fooW & (fooX & (fooK & !(fooJ)))));
CTLSPEC NAME ctl5 := AG((!(fooNotNotFalse) & (fooNotNotTrue & (fooNotFalse & ((((fooNotEqualsEnum & fooEqualsEnum) & fooNotEqualsInteger) & fooEqualsInteger) & !(fooNotTrue))))));
CTLSPEC NAME ctl6 := AG(((fooMinusUnary_1 = -1) & ((fooMinusUnary_-1 = 1) & (fooMinusUnary_0 = 0))));
CTLSPEC NAME ctl7 := AG((((fooMinusUnary2_0 = 0) & (fooMinusUnary2_-1 != 0)) & (fooMinusUnary2_1 != 0)));
CTLSPEC NAME ctl8 := AG((((!(fooLT2) & fooLT1) & fooLT3) & !(fooLT4)));
CTLSPEC NAME ctl9 := AG((!(fooGT4) & ((fooGT1 & !(fooGT2)) & fooGT3)));
CTLSPEC NAME ctl10 := AG((fooLE6 & (fooLE5 & (!(fooLE4) & (fooLE3 & (!(fooLE2) & fooLE1))))));
CTLSPEC NAME ctl11 := AG((((!(fooGE4) & (fooGE3 & (!(fooGE2) & fooGE1))) & fooGE5) & fooGE6));
CTLSPEC NAME ctl12 := AG(((((((fooMod6 & ((((fooMod2 & fooMod1) & fooMod3) & fooMod4) & fooMod5)) & fooMod7) & fooMod8) & fooMod10) & fooMod11) & fooMod12));
CTLSPEC NAME ctl13 := AG(((fooXor3 & (fooXor2 & !(fooXor1))) & !(fooXor4)));
CTLSPEC NAME ctl14 := (AX(AG((funcA = -1))) & (funcA = 2));
CTLSPEC NAME ctl15 := (AX(AG((funcB = 1))) & (funcB = 2));
CTLSPEC NAME ctl16 := ((funcC = 2) & AX(AG((funcC = -1))));
CTLSPEC NAME ctl17 := (AX(AG((funcD = 1))) & (funcD = 2));
CTLSPEC NAME ctl18 := ((funcDiv = 3) & AX(AG((funcDiv = 2))));
CTLSPEC NAME ctl19 := ((funcMult = 8) & AX(AG((funcMult = 6))));
CTLSPEC NAME ctl20 := (AX(AG((funcAdd = 5))) & (funcAdd = 3));
