--file examples\philosophersPhdThesis.smv
-- options: flatten? false
MODULE main
	VAR
		eating_PHIL_1: boolean; --controlled
		eating_PHIL_2: boolean; --controlled
		eating_PHIL_3: boolean; --controlled
		eating_PHIL_4: boolean; --controlled
		eating_PHIL_5: boolean; --controlled
		hungry_PHIL_1: boolean; --monitored
		hungry_PHIL_2: boolean; --monitored
		hungry_PHIL_3: boolean; --monitored
		hungry_PHIL_4: boolean; --monitored
		hungry_PHIL_5: boolean; --monitored
		owner_FORK_1: {PHILOSOPHERS_UNDEF, PHIL_1, PHIL_2, PHIL_3, PHIL_4, PHIL_5}; --controlled
		owner_FORK_2: {PHILOSOPHERS_UNDEF, PHIL_1, PHIL_2, PHIL_3, PHIL_4, PHIL_5}; --controlled
		owner_FORK_3: {PHILOSOPHERS_UNDEF, PHIL_1, PHIL_2, PHIL_3, PHIL_4, PHIL_5}; --controlled
		owner_FORK_4: {PHILOSOPHERS_UNDEF, PHIL_1, PHIL_2, PHIL_3, PHIL_4, PHIL_5}; --controlled
		owner_FORK_5: {PHILOSOPHERS_UNDEF, PHIL_1, PHIL_2, PHIL_3, PHIL_4, PHIL_5}; --controlled
		--declaration of choose variables
		var_$p_0: {PHIL_1, PHIL_2, PHIL_3, PHIL_4, PHIL_5};
	DEFINE
		left_fork_PHIL_1 := FORK_1;
		left_fork_PHIL_2 := FORK_2;
		left_fork_PHIL_3 := FORK_3;
		left_fork_PHIL_4 := FORK_4;
		left_fork_PHIL_5 := FORK_5;
		right_fork_PHIL_1 := FORK_2;
		right_fork_PHIL_2 := FORK_3;
		right_fork_PHIL_3 := FORK_4;
		right_fork_PHIL_4 := FORK_5;
		right_fork_PHIL_5 := FORK_1;
	CONSTANTS PHIL_1, PHIL_2, PHIL_3, PHIL_4, PHIL_5, PHILOSOPHERS_UNDEF, PHIL_1, PHIL_2, PHIL_3, PHIL_4, PHIL_5, FORK_1, FORK_2, FORK_3, FORK_4, FORK_5, FORK_UNDEF;
	ASSIGN
		init(eating_PHIL_1) := FALSE;
		init(eating_PHIL_2) := FALSE;
		init(eating_PHIL_3) := FALSE;
		init(eating_PHIL_4) := FALSE;
		init(eating_PHIL_5) := FALSE;
		init(owner_FORK_1) := PHILOSOPHERS_UNDEF;
		init(owner_FORK_2) := PHILOSOPHERS_UNDEF;
		init(owner_FORK_3) := PHILOSOPHERS_UNDEF;
		init(owner_FORK_4) := PHILOSOPHERS_UNDEF;
		init(owner_FORK_5) := PHILOSOPHERS_UNDEF;
		next(eating_PHIL_1) :=
			case
				((var_$p_0 = PHIL_1) & ((owner_FORK_1 = PHILOSOPHERS_UNDEF) & (owner_FORK_2 = PHILOSOPHERS_UNDEF)) & hungry_PHIL_1): TRUE;
				(((owner_FORK_2 = PHIL_1) & ((owner_FORK_1 = PHIL_1) & eating_PHIL_1)) & (var_$p_0 = PHIL_1) & !(hungry_PHIL_1)): FALSE;
				TRUE: eating_PHIL_1;
			esac;
		next(eating_PHIL_2) :=
			case
				(hungry_PHIL_2 & (var_$p_0 = PHIL_2) & ((owner_FORK_2 = PHILOSOPHERS_UNDEF) & (owner_FORK_3 = PHILOSOPHERS_UNDEF))): TRUE;
				((var_$p_0 = PHIL_2) & (((owner_FORK_2 = PHIL_2) & eating_PHIL_2) & (owner_FORK_3 = PHIL_2)) & !(hungry_PHIL_2)): FALSE;
				TRUE: eating_PHIL_2;
			esac;
		next(eating_PHIL_3) :=
			case
				(((owner_FORK_3 = PHILOSOPHERS_UNDEF) & (owner_FORK_4 = PHILOSOPHERS_UNDEF)) & hungry_PHIL_3 & (var_$p_0 = PHIL_3)): TRUE;
				(!(hungry_PHIL_3) & (var_$p_0 = PHIL_3) & (((owner_FORK_3 = PHIL_3) & eating_PHIL_3) & (owner_FORK_4 = PHIL_3))): FALSE;
				TRUE: eating_PHIL_3;
			esac;
		next(eating_PHIL_4) :=
			case
				((((owner_FORK_4 = PHIL_4) & eating_PHIL_4) & (owner_FORK_5 = PHIL_4)) & !(hungry_PHIL_4) & (var_$p_0 = PHIL_4)): FALSE;
				(hungry_PHIL_4 & ((owner_FORK_5 = PHILOSOPHERS_UNDEF) & (owner_FORK_4 = PHILOSOPHERS_UNDEF)) & (var_$p_0 = PHIL_4)): TRUE;
				TRUE: eating_PHIL_4;
			esac;
		next(eating_PHIL_5) :=
			case
				(hungry_PHIL_5 & ((owner_FORK_1 = PHILOSOPHERS_UNDEF) & (owner_FORK_5 = PHILOSOPHERS_UNDEF)) & (var_$p_0 = PHIL_5)): TRUE;
				(!(hungry_PHIL_5) & (var_$p_0 = PHIL_5) & ((owner_FORK_1 = PHIL_5) & (eating_PHIL_5 & (owner_FORK_5 = PHIL_5)))): FALSE;
				TRUE: eating_PHIL_5;
			esac;
		next(owner_FORK_1) :=
			case
				((var_$p_0 = PHIL_1) & ((owner_FORK_1 = PHILOSOPHERS_UNDEF) & (owner_FORK_2 = PHILOSOPHERS_UNDEF)) & hungry_PHIL_1) & PHIL_1 in {PHILOSOPHERS_UNDEF, PHIL_1, PHIL_2, PHIL_3, PHIL_4, PHIL_5}: PHIL_1;
				(hungry_PHIL_5 & ((owner_FORK_1 = PHILOSOPHERS_UNDEF) & (owner_FORK_5 = PHILOSOPHERS_UNDEF)) & (var_$p_0 = PHIL_5)) & PHIL_5 in {PHILOSOPHERS_UNDEF, PHIL_1, PHIL_2, PHIL_3, PHIL_4, PHIL_5}: PHIL_5;
				((((owner_FORK_2 = PHIL_1) & ((owner_FORK_1 = PHIL_1) & eating_PHIL_1)) & (var_$p_0 = PHIL_1) & !(hungry_PHIL_1)) | (!(hungry_PHIL_5) & (var_$p_0 = PHIL_5) & ((owner_FORK_1 = PHIL_5) & (eating_PHIL_5 & (owner_FORK_5 = PHIL_5))))) & PHILOSOPHERS_UNDEF in {PHILOSOPHERS_UNDEF, PHIL_1, PHIL_2, PHIL_3, PHIL_4, PHIL_5}: PHILOSOPHERS_UNDEF;
				TRUE: owner_FORK_1;
			esac;
		next(owner_FORK_2) :=
			case
				(hungry_PHIL_2 & (var_$p_0 = PHIL_2) & ((owner_FORK_2 = PHILOSOPHERS_UNDEF) & (owner_FORK_3 = PHILOSOPHERS_UNDEF))) & PHIL_2 in {PHILOSOPHERS_UNDEF, PHIL_1, PHIL_2, PHIL_3, PHIL_4, PHIL_5}: PHIL_2;
				((var_$p_0 = PHIL_1) & ((owner_FORK_1 = PHILOSOPHERS_UNDEF) & (owner_FORK_2 = PHILOSOPHERS_UNDEF)) & hungry_PHIL_1) & PHIL_1 in {PHILOSOPHERS_UNDEF, PHIL_1, PHIL_2, PHIL_3, PHIL_4, PHIL_5}: PHIL_1;
				((((owner_FORK_2 = PHIL_1) & ((owner_FORK_1 = PHIL_1) & eating_PHIL_1)) & (var_$p_0 = PHIL_1) & !(hungry_PHIL_1)) | ((var_$p_0 = PHIL_2) & (((owner_FORK_2 = PHIL_2) & eating_PHIL_2) & (owner_FORK_3 = PHIL_2)) & !(hungry_PHIL_2))) & PHILOSOPHERS_UNDEF in {PHILOSOPHERS_UNDEF, PHIL_1, PHIL_2, PHIL_3, PHIL_4, PHIL_5}: PHILOSOPHERS_UNDEF;
				TRUE: owner_FORK_2;
			esac;
		next(owner_FORK_3) :=
			case
				(hungry_PHIL_2 & (var_$p_0 = PHIL_2) & ((owner_FORK_2 = PHILOSOPHERS_UNDEF) & (owner_FORK_3 = PHILOSOPHERS_UNDEF))) & PHIL_2 in {PHILOSOPHERS_UNDEF, PHIL_1, PHIL_2, PHIL_3, PHIL_4, PHIL_5}: PHIL_2;
				(((owner_FORK_3 = PHILOSOPHERS_UNDEF) & (owner_FORK_4 = PHILOSOPHERS_UNDEF)) & hungry_PHIL_3 & (var_$p_0 = PHIL_3)) & PHIL_3 in {PHILOSOPHERS_UNDEF, PHIL_1, PHIL_2, PHIL_3, PHIL_4, PHIL_5}: PHIL_3;
				((!(hungry_PHIL_3) & (var_$p_0 = PHIL_3) & (((owner_FORK_3 = PHIL_3) & eating_PHIL_3) & (owner_FORK_4 = PHIL_3))) | ((var_$p_0 = PHIL_2) & (((owner_FORK_2 = PHIL_2) & eating_PHIL_2) & (owner_FORK_3 = PHIL_2)) & !(hungry_PHIL_2))) & PHILOSOPHERS_UNDEF in {PHILOSOPHERS_UNDEF, PHIL_1, PHIL_2, PHIL_3, PHIL_4, PHIL_5}: PHILOSOPHERS_UNDEF;
				TRUE: owner_FORK_3;
			esac;
		next(owner_FORK_4) :=
			case
				(((owner_FORK_3 = PHILOSOPHERS_UNDEF) & (owner_FORK_4 = PHILOSOPHERS_UNDEF)) & hungry_PHIL_3 & (var_$p_0 = PHIL_3)) & PHIL_3 in {PHILOSOPHERS_UNDEF, PHIL_1, PHIL_2, PHIL_3, PHIL_4, PHIL_5}: PHIL_3;
				((!(hungry_PHIL_3) & (var_$p_0 = PHIL_3) & (((owner_FORK_3 = PHIL_3) & eating_PHIL_3) & (owner_FORK_4 = PHIL_3))) | ((((owner_FORK_4 = PHIL_4) & eating_PHIL_4) & (owner_FORK_5 = PHIL_4)) & !(hungry_PHIL_4) & (var_$p_0 = PHIL_4))) & PHILOSOPHERS_UNDEF in {PHILOSOPHERS_UNDEF, PHIL_1, PHIL_2, PHIL_3, PHIL_4, PHIL_5}: PHILOSOPHERS_UNDEF;
				(hungry_PHIL_4 & ((owner_FORK_5 = PHILOSOPHERS_UNDEF) & (owner_FORK_4 = PHILOSOPHERS_UNDEF)) & (var_$p_0 = PHIL_4)) & PHIL_4 in {PHILOSOPHERS_UNDEF, PHIL_1, PHIL_2, PHIL_3, PHIL_4, PHIL_5}: PHIL_4;
				TRUE: owner_FORK_4;
			esac;
		next(owner_FORK_5) :=
			case
				(((((owner_FORK_4 = PHIL_4) & eating_PHIL_4) & (owner_FORK_5 = PHIL_4)) & !(hungry_PHIL_4) & (var_$p_0 = PHIL_4)) | (!(hungry_PHIL_5) & (var_$p_0 = PHIL_5) & ((owner_FORK_1 = PHIL_5) & (eating_PHIL_5 & (owner_FORK_5 = PHIL_5))))) & PHILOSOPHERS_UNDEF in {PHILOSOPHERS_UNDEF, PHIL_1, PHIL_2, PHIL_3, PHIL_4, PHIL_5}: PHILOSOPHERS_UNDEF;
				(hungry_PHIL_5 & ((owner_FORK_1 = PHILOSOPHERS_UNDEF) & (owner_FORK_5 = PHILOSOPHERS_UNDEF)) & (var_$p_0 = PHIL_5)) & PHIL_5 in {PHILOSOPHERS_UNDEF, PHIL_1, PHIL_2, PHIL_3, PHIL_4, PHIL_5}: PHIL_5;
				(hungry_PHIL_4 & ((owner_FORK_5 = PHILOSOPHERS_UNDEF) & (owner_FORK_4 = PHILOSOPHERS_UNDEF)) & (var_$p_0 = PHIL_4)) & PHIL_4 in {PHILOSOPHERS_UNDEF, PHIL_1, PHIL_2, PHIL_3, PHIL_4, PHIL_5}: PHIL_4;
				TRUE: owner_FORK_5;
			esac;
	INVAR	((var_$p_0 = PHIL_1) | (var_$p_0 = PHIL_2) | (var_$p_0 = PHIL_3) | (var_$p_0 = PHIL_4) | (var_$p_0 = PHIL_5));
--CTL properties
CTLSPEC NAME ctl0 := EF((eating_PHIL_3 & eating_PHIL_1));
CTLSPEC NAME ctl1 := !(EF((eating_PHIL_3 & eating_PHIL_1)));
CTLSPEC NAME ctl2 := (AG(EF(eating_PHIL_3)) & AG(EF(eating_PHIL_2)) & AG(EF(eating_PHIL_1)) & AG(EF(eating_PHIL_5)) & AG(EF(eating_PHIL_4)));
CTLSPEC NAME ctl3 := (AG(EF(!(eating_PHIL_2))) & AG(EF(!(eating_PHIL_1))) & AG(EF(!(eating_PHIL_3))) & AG(EF(!(eating_PHIL_4))) & AG(EF(!(eating_PHIL_5))));
